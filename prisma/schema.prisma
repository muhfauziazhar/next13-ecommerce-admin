generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("DATABASE_URL")
  relationMode = "prisma"
}

model Store {
  id              String    @id @default(uuid())
  name            String
  slug            String     @unique
  userId          String
  categories      Category[] @relation("StoreToCategory")
  products        Product[]  @relation("StoreToProduct")
  orders          Order[]    @relation("StoreToOrder")
  coupons         Coupon[]   @relation("StoreToCoupon")
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
}


model Category {
  id          String      @id @default(uuid())
  storeId     String      // Foreign Key to Store
  store       Store       @relation("StoreToCategory", fields: [storeId], references: [id], onDelete: Cascade)
  name        String
  products    Product[]   @relation("CategoryToProduct")
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([storeId])
}

model Product {
  id          String    @id @default(uuid())
  storeId     String    // Foreign Key to Store
  store       Store     @relation("StoreToProduct", fields: [storeId], references: [id], onDelete: Cascade)
  categoryId  String    // Foreign Key to Category
  category    Category  @relation("CategoryToProduct", fields: [categoryId], references: [id], onDelete: Cascade)
  name        String
  description String?
  price       Float?
  stock       Int?
  isArchived  Boolean   @default(false)
  images      Image[]   // Relation to Image model
  orderItems  OrderItem[]   // Relation to Order model
  variants    Variant[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([storeId])
  @@index([categoryId])
}

model Variant {
  id          String    @id @default(uuid())
  productId   String    // Foreign Key to Product
  product     Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  name        String
  description String?
  price       Float?
  stock       Int?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([productId])
  
}

model Order {
  id          String        @id @default(uuid())
  storeId     String        // Foreign Key to Store
  store       Store         @relation("StoreToOrder", fields: [storeId], references: [id], onDelete: Cascade)
  orderItems  OrderItem[]   // Relation to OrderItem model
  totalAmount Float
  isPaid      Boolean       @default(false)
  status      OrderStatus   @default(waiting)
  phone       String        @default("")
  address     String        @default("")
  coupon      Coupon?       @relation(fields: [couponId], references: [id])
  couponId    String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@index([storeId])
}

enum OrderStatus {
  waiting
  progress
  done
}

// Intermediary for a many-to-many relationship
model OrderItem {
  id        String  @id @default(uuid())
  orderId   String  // Foreign Key to Order
  order     Order   @relation(fields: [orderId], references: [id])
  productId String  // Foreign Key to Product
  product   Product @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
}

model Image {
  id          String   @id @default(uuid())
  productId   String   // Foreign Key to Product
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  url         String   // URL of the image
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([productId])
}

model Coupon {
  id          String    @id @default(uuid())
  code        String    @unique
  storeId     String        // Foreign Key to Store
  store       Store         @relation("StoreToCoupon", fields: [storeId], references: [id], onDelete: Cascade)
  discount    Float
  validFrom   DateTime
  validUntil  DateTime
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  orders      Order[]
}
